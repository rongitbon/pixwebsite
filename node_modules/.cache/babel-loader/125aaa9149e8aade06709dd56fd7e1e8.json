{"ast":null,"code":"import _objectSpread from \"D:\\\\udemy\\\\project\\\\pixwebsite\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"D:\\\\udemy\\\\project\\\\pixwebsite\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\udemy\\\\project\\\\pixwebsite\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\udemy\\\\project\\\\pixwebsite\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\udemy\\\\project\\\\pixwebsite\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\udemy\\\\project\\\\pixwebsite\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\udemy\\\\project\\\\pixwebsite\\\\src\\\\comp\\\\form\\\\form-main.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Input from './input/input.js';\nimport Hsecondary from \"../heading-secondary/h-secondary.js\";\nimport BtnAn from \"../button/btn-an.js\";\nimport * as action from '../../store/actions/index.js';\nimport \"./form-main.scss\";\n\nvar FormMain =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(FormMain, _Component);\n\n  function FormMain() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, FormMain);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(FormMain)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      signupForm: {\n        email: {\n          elementType: 'input-v1',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Enter your Email'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false,\n          label: true\n        },\n        nickname: {\n          elementType: 'input-v1',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Enter your nickname'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false,\n          label: true\n        },\n        password: {\n          elementType: 'input-v1',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'Enter your password'\n          },\n          value: '',\n          validation: {\n            required: true,\n            confirm: true\n          },\n          valid: false,\n          touched: false,\n          label: true\n        },\n        passwordRepeat: {\n          elementType: 'input-v1',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'Confirm password'\n          },\n          value: '',\n          validation: {\n            required: true,\n            confirm: true\n          },\n          valid: false,\n          touched: false,\n          label: true\n        },\n        accept: {\n          elementType: 'radio-v1',\n          elementConfig: {\n            name: 'accept',\n            options: [{\n              text: 'accept',\n              displayText: \"Accept\",\n              value: 'accept'\n            }, {\n              text: 'decline',\n              displayText: \"Decline\",\n              value: 'decline'\n            }]\n          },\n          value: '',\n          validation: {},\n          valid: true,\n          touched: false,\n          label: true\n        }\n      }\n    };\n\n    _this.inputChangedHandler = function (event, inputIdentifier) {\n      var updateSignupForm = _objectSpread({}, _this.state.signupForm);\n\n      var updateFormElement = _objectSpread({}, updateSignupForm[inputIdentifier]);\n\n      updateFormElement.value = event.target.value;\n      updateFormElement.valid = _this.checkValidity(updateFormElement.value, updateFormElement.validation, inputIdentifier);\n      updateFormElement.touched = true;\n      updateSignupForm[inputIdentifier] = updateFormElement;\n      console.log(event.target.value);\n      console.log(event.target.checked);\n\n      _this.setState({\n        signupForm: updateSignupForm\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(FormMain, [{\n    key: \"checkValidity\",\n    value: function checkValidity(value, rules, inputIdentifier) {\n      var isValid = true;\n\n      if (!rules) {\n        return true;\n      }\n\n      if (rules.required) {\n        isValid = value.trim() !== '';\n      }\n\n      if (rules.minLength) {\n        isValid = value.length >= rules.minLength && isValid;\n      }\n\n      if (rules.maxLength) {\n        isValid = value.length <= rules.maxLength && isValid;\n      }\n\n      if (rules.isEmail) {\n        isValid = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/.test(value) && isValid;\n      }\n\n      if (rules.isNumeric) {\n        isValid = /^\\d+$/.test(value) && isValid;\n      }\n\n      if (rules.confirm) {\n        var updateSignupForm = _objectSpread({}, this.state.signupForm);\n\n        if (inputIdentifier === \"password\") {\n          isValid = value === this.state.signupForm.passwordRepeat.value && isValid;\n          updateSignupForm.passwordRepeat.valid = isValid;\n        } else {\n          isValid = value === this.state.signupForm.password.value && isValid;\n          updateSignupForm.password.valid = isValid;\n        }\n\n        console.log(\"aaaaa \" + isValid);\n        this.setState({\n          signupForm: updateSignupForm\n        });\n      }\n\n      return isValid;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var sendRequestHandler = function sendRequestHandler() {\n        if (_this2.state.signupForm.email.valid && _this2.state.signupForm.nickname.valid && _this2.state.signupForm.password.valid) {\n          _this2.props.signup(_this2);\n        } else {\n          console.log(\"error\");\n        }\n      };\n\n      return React.createElement(\"div\", {\n        className: \"form-main\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"form-main-signup\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"form-main-signup-h\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, React.createElement(Hsecondary, {\n        text: \"New Account\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      })), Object.keys(this.state.signupForm).map(function (key) {\n        return React.createElement(Input, {\n          key: key,\n          elementType: _this2.state.signupForm[key].elementType,\n          elementConfig: _this2.state.signupForm[key].elementConfig,\n          value: _this2.state.signupForm[key].value,\n          invalid: !_this2.state.signupForm[key].valid,\n          shouldValidate: _this2.state.signupForm[key].validation,\n          touched: _this2.state.signupForm[key].touched,\n          changed: function changed(event) {\n            return _this2.inputChangedHandler(event, key);\n          },\n          label: _this2.state.signupForm[key].label,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 174\n          },\n          __self: this\n        });\n      }), React.createElement(\"div\", {\n        className: \"form-main-btn\",\n        onClick: sendRequestHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, React.createElement(BtnAn, {\n        color: \"blue\",\n        text: \"sign up\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"form-main-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        className: \"form-main-content-h\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, \"Sign up now!\"), React.createElement(\"p\", {\n        className: \"form-main-content-t\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, \"fdsfdsfsdfsd df sdfsdfsdf sdffdffgfgfd ggfd gdfg dfg   gfgdfgdfg\")));\n    }\n  }]);\n\n  return FormMain;\n}(Component);\n\n;\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    signup: function signup(comp) {\n      return dispatch(action.signup(comp.state.signupForm.email.value, comp.state.signupForm.nickname.value, comp.state.signupForm.password.value));\n    },\n    openErrorMessage: function openErrorMessage(msg) {\n      return dispatch(action.compFailed(msg, 'signup'));\n    }\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(FormMain);","map":{"version":3,"sources":["D:\\udemy\\project\\pixwebsite\\src\\comp\\form\\form-main.js"],"names":["React","Component","connect","Input","Hsecondary","BtnAn","action","FormMain","state","signupForm","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","label","nickname","password","confirm","passwordRepeat","accept","name","options","text","displayText","inputChangedHandler","event","inputIdentifier","updateSignupForm","updateFormElement","target","checkValidity","console","log","checked","setState","rules","isValid","trim","minLength","length","maxLength","test","isNumeric","sendRequestHandler","props","signup","Object","keys","map","key","mapDispatchToProps","dispatch","comp","openErrorMessage","msg","compFailed"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Input from './input/input.js';\r\nimport Hsecondary from \"../heading-secondary/h-secondary.js\";\r\nimport BtnAn from \"../button/btn-an.js\";\r\nimport * as action from '../../store/actions/index.js';\r\nimport \"./form-main.scss\";\r\n\r\nclass FormMain extends Component {\r\n    state = {\r\n        signupForm: {\r\n            email: {\r\n                elementType: 'input-v1',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Enter your Email'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false,\r\n                label: true\r\n            },\r\n            nickname: {\r\n                elementType: 'input-v1',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Enter your nickname'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                },\r\n                valid: false,\r\n                touched: false,\r\n                label: true\r\n            },\r\n            password: {\r\n                elementType: 'input-v1',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Enter your password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    confirm: true\r\n                },\r\n                valid: false,\r\n                touched: false,\r\n                label: true\r\n            },\r\n            passwordRepeat: {\r\n                elementType: 'input-v1',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Confirm password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    confirm: true\r\n                },\r\n                valid: false,\r\n                touched: false,\r\n                label: true\r\n            },\r\n            accept: {\r\n                elementType: 'radio-v1',\r\n                elementConfig: {\r\n                    name: 'accept',\r\n                    options: [\r\n                        {text: 'accept', displayText: \"Accept\", value:'accept'},\r\n                        {text: 'decline', displayText: \"Decline\", value:'decline'}\r\n                    ]\r\n                },\r\n                value: '',\r\n                validation: {},\r\n                valid: true,\r\n                touched: false,\r\n                label: true\r\n            }\r\n\r\n        }\r\n    };\r\n\r\n    checkValidity(value, rules, inputIdentifier) {\r\n        let isValid = true;\r\n        if (!rules) {\r\n            return true\r\n        }\r\n\r\n        if (rules.required) {\r\n            isValid = value.trim() !== '';\r\n        }\r\n\r\n        if (rules.minLength) {\r\n            isValid = value.length >= rules.minLength && isValid;\r\n        }\r\n\r\n        if (rules.maxLength) {\r\n            isValid = value.length <= rules.maxLength && isValid;\r\n        }\r\n\r\n        if (rules.isEmail) {\r\n            isValid = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/.test(value) && isValid;\r\n        }\r\n\r\n        if (rules.isNumeric) {\r\n            isValid = /^\\d+$/.test(value) && isValid;\r\n        }\r\n\r\n        if (rules.confirm) {\r\n            const updateSignupForm = {\r\n                ...this.state.signupForm\r\n            };\r\n\r\n            if (inputIdentifier === \"password\") {\r\n                isValid = value === this.state.signupForm.passwordRepeat.value && isValid;\r\n                updateSignupForm.passwordRepeat.valid = isValid;\r\n            } \r\n            else {\r\n                isValid = value === this.state.signupForm.password.value && isValid;\r\n                updateSignupForm.password.valid = isValid;\r\n            }\r\n            console.log(\"aaaaa \" + isValid );\r\n            this.setState({signupForm: updateSignupForm});\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n\r\n    inputChangedHandler = (event, inputIdentifier) => {\r\n        const updateSignupForm = {\r\n            ...this.state.signupForm\r\n        };\r\n        const updateFormElement = {\r\n            ...updateSignupForm[inputIdentifier]\r\n        };\r\n        updateFormElement.value = event.target.value;\r\n        updateFormElement.valid = this.checkValidity(updateFormElement.value, updateFormElement.validation, inputIdentifier);\r\n        updateFormElement.touched = true;\r\n        updateSignupForm[inputIdentifier] = updateFormElement;\r\n        console.log(event.target.value);\r\n        console.log(event.target.checked);\r\n\r\n        this.setState({signupForm: updateSignupForm});\r\n    }\r\n\r\n\r\n    render () {\r\n        const sendRequestHandler = () => {\r\n            if (this.state.signupForm.email.valid && \r\n                this.state.signupForm.nickname.valid &&\r\n                this.state.signupForm.password.valid){\r\n                    this.props.signup(this);\r\n            }\r\n            else {\r\n                console.log(\"error\");\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className=\"form-main\">\r\n                <div className=\"form-main-signup\">\r\n                    <div className=\"form-main-signup-h\">\r\n                        <Hsecondary text=\"New Account\"/>\r\n                    </div>\r\n                    {Object.keys(this.state.signupForm).map(key => (\r\n                        <Input\r\n                            key={key}\r\n                            elementType={this.state.signupForm[key].elementType}\r\n                            elementConfig={this.state.signupForm[key].elementConfig}\r\n                            value={this.state.signupForm[key].value}\r\n                            invalid={!this.state.signupForm[key].valid}\r\n                            shouldValidate={this.state.signupForm[key].validation}\r\n                            touched={this.state.signupForm[key].touched}\r\n                            changed={(event) => this.inputChangedHandler(event, key)}\r\n                            label={this.state.signupForm[key].label}\r\n                             />\r\n                    ))}\r\n                    <div className=\"form-main-btn\" onClick={sendRequestHandler}><BtnAn color={\"blue\"} text={\"sign up\"} /></div>\r\n                </div>\r\n                <div className=\"form-main-content\">\r\n                    <h2 className=\"form-main-content-h\">Sign up now!</h2>\r\n                    <p className=\"form-main-content-t\">fdsfdsfsdfsd df sdfsdfsdf sdffdffgfgfd ggfd gdfg dfg   gfgdfgdfg</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        signup: (comp) => dispatch( action.signup(\r\n            comp.state.signupForm.email.value,\r\n            comp.state.signupForm.nickname.value,\r\n            comp.state.signupForm.password.value\r\n            )\r\n        ),\r\n        openErrorMessage : (msg) => dispatch (action.compFailed(msg, 'signup'))\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(FormMain);"]},"metadata":{},"sourceType":"module"}