{"ast":null,"code":"import _objectSpread from \"D:\\\\udemy\\\\project\\\\pixwebsite\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"D:\\\\udemy\\\\project\\\\pixwebsite\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"D:\\\\udemy\\\\project\\\\pixwebsite\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\udemy\\\\project\\\\pixwebsite\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\udemy\\\\project\\\\pixwebsite\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\udemy\\\\project\\\\pixwebsite\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"D:\\\\udemy\\\\project\\\\pixwebsite\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"D:\\\\udemy\\\\project\\\\pixwebsite\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\udemy\\\\project\\\\pixwebsite\\\\src\\\\comp\\\\search-menu\\\\search-menu.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as card from '../../store/actions/index.js';\nimport Input from '../form/input/input.js';\nimport './search-menu.scss';\n\nvar SearchMenu =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SearchMenu, _Component);\n\n  function SearchMenu() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SearchMenu);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SearchMenu)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      menu: {\n        creatures: {\n          elementType: 'checkbox-v1',\n          elementConfig: {\n            name: 'creature',\n            options: [{\n              text: 'robotV1',\n              displayText: \"RobotV1\",\n              value: ''\n            }, {\n              text: 'robotV2',\n              displayText: \"RobotV2\",\n              value: ''\n            }, {\n              text: 'monster',\n              displayText: \"Monster\",\n              value: ''\n            }, {\n              text: 'kitten',\n              displayText: \"Kitten\",\n              value: ''\n            }]\n          },\n          value: '',\n          validation: {},\n          valid: false,\n          touched: true,\n          clicked: false,\n          label: false\n        },\n        price: {\n          elementType: 'checkbox-v1',\n          elementConfig: {\n            name: 'price',\n            options: [{\n              text: '0',\n              displayText: \"Under $1\",\n              value: ''\n            }, {\n              text: '1',\n              displayText: \"$1 to $2\",\n              value: ''\n            }, {\n              text: '2 above',\n              displayText: \"$2 and Above\",\n              value: ''\n            }]\n          },\n          value: '',\n          validation: {},\n          valid: false,\n          touched: true,\n          clicked: false,\n          label: false\n        },\n        time: {\n          elementType: 'radio-v2',\n          elementConfig: {\n            name: 'date',\n            options: [{\n              text: 'today',\n              displayText: \"Today\",\n              value: ''\n            }, {\n              text: 'this week',\n              displayText: \"This Week\",\n              value: ''\n            }, {\n              text: 'this month',\n              displayText: \"This Month\",\n              value: ''\n            }]\n          },\n          value: ' ',\n          validation: {},\n          valid: false,\n          touched: true,\n          clicked: false,\n          label: false\n        }\n      }\n    };\n\n    _this.setCards = function () {\n      var characters = _this.state.menu.creatures.elementConfig.options.reduce(function (cha_list, cha) {\n        return cha.value ? [].concat(_toConsumableArray(cha_list), [cha.value]) : cha_list;\n      }, []);\n\n      var price = _this.state.menu.price.elementConfig.options.reduce(function (price_list, price) {\n        return price.value ? [].concat(_toConsumableArray(price_list), [price.value]) : price_list;\n      }, []);\n\n      console.log(price);\n\n      _this.props.getCardsByTheMenu(_assertThisInitialized(_this), characters, price);\n    };\n\n    _this.inputChangedHandler = function (event, inputIdentifier, i) {\n      var updateMenu = _objectSpread({}, _this.state.menu);\n\n      var updateMenuElement = _objectSpread({}, updateMenu[inputIdentifier]);\n\n      updateMenuElement.touched = true;\n      console.log(event.target.checked);\n      updateMenuElement.elementConfig.options[i].value = updateMenuElement.elementConfig.options[i].value === updateMenuElement.elementConfig.options[i].text ? \"\" : updateMenuElement.elementConfig.options[i].text;\n      updateMenuElement.value = updateMenuElement.value === updateMenuElement.elementConfig.options[i].text ? \" \" : updateMenuElement.elementConfig.options[i].text;\n      updateMenu[inputIdentifier] = updateMenuElement;\n      console.log(updateMenuElement.value);\n      console.log(updateMenuElement);\n\n      _this.setState({\n        menu: updateMenu\n      });\n    };\n\n    _this.clickedhandler = function (element) {\n      var updateMenu = _objectSpread({}, _this.state.menu);\n\n      var updateMenuElement = _objectSpread({}, updateMenu[element]);\n\n      updateMenuElement.clicked = !updateMenuElement.clicked;\n      updateMenu[element] = updateMenuElement;\n\n      _this.setState({\n        menu: updateMenu\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(SearchMenu, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.props.getCardsByTheMenu(this, [], []);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"search-menu\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"search-menu-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"search-menu-item-btn\",\n        onClick: function onClick() {\n          return _this2.clickedhandler(\"creatures\");\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, \"Creatures\"), React.createElement(\"div\", {\n        className: \"search-menu-item-input\",\n        style: {\n          maxHeight: this.state.menu.creatures.clicked ? \"100rem\" : \"0\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(Input, {\n        elementType: this.state.menu[\"creatures\"].elementType,\n        elementConfig: this.state.menu[\"creatures\"].elementConfig,\n        value: this.state.menu[\"creatures\"].value,\n        invalid: !this.state.menu[\"creatures\"].valid,\n        shouldValidate: this.state.menu[\"creatures\"].validation,\n        touched: this.state.menu[\"creatures\"].touched,\n        changed: function changed(event, index) {\n          return _this2.inputChangedHandler(event, \"creatures\", index);\n        },\n        label: this.state.menu[\"creatures\"].label,\n        checked: this.state.menu[\"creatures\"].checked,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"search-menu-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"search-menu-item-btn\",\n        onClick: function onClick() {\n          return _this2.clickedhandler(\"price\");\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, \"Price\"), React.createElement(\"div\", {\n        className: \"search-menu-item-input\",\n        style: {\n          maxHeight: this.state.menu.price.clicked ? \"100rem\" : \"0\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, React.createElement(Input, {\n        elementType: this.state.menu[\"price\"].elementType,\n        elementConfig: this.state.menu[\"price\"].elementConfig,\n        value: this.state.menu[\"price\"].value,\n        invalid: !this.state.menu[\"price\"].valid,\n        shouldValidate: this.state.menu[\"price\"].validation,\n        touched: this.state.menu[\"price\"].touched,\n        changed: function changed(event, index) {\n          return _this2.inputChangedHandler(event, \"price\", index);\n        },\n        label: this.state.menu[\"price\"].label,\n        checked: this.state.menu[\"price\"].checked,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"search-menu-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"search-menu-item-btn\",\n        onClick: function onClick() {\n          return _this2.clickedhandler(\"time\");\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, \"Date\"), React.createElement(\"div\", {\n        className: \"search-menu-item-input\",\n        style: {\n          maxHeight: this.state.menu.time.clicked ? \"100rem\" : \"0\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, React.createElement(Input, {\n        elementType: this.state.menu[\"time\"].elementType,\n        elementConfig: this.state.menu[\"time\"].elementConfig,\n        value: this.state.menu[\"time\"].value,\n        invalid: !this.state.menu[\"time\"].valid,\n        shouldValidate: this.state.menu[\"time\"].validation,\n        touched: this.state.menu[\"time\"].touched,\n        changed: function changed(event, index) {\n          return _this2.inputChangedHandler(event, \"time\", index);\n        },\n        label: this.state.menu[\"time\"].label,\n        checked: this.state.menu[\"time\"].checked,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"search-menu-search\",\n        onClick: this.setCards,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, \"search\"));\n    }\n  }]);\n\n  return SearchMenu;\n}(Component);\n\n;\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    getCardsByTheMenu: function getCardsByTheMenu(comp, characters, price) {\n      return dispatch(card.getCardsByTheMenu(comp.state.menu.time.value, characters, price));\n    }\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(SearchMenu);","map":{"version":3,"sources":["D:\\udemy\\project\\pixwebsite\\src\\comp\\search-menu\\search-menu.js"],"names":["React","Component","connect","card","Input","SearchMenu","state","menu","creatures","elementType","elementConfig","name","options","text","displayText","value","validation","valid","touched","clicked","label","price","time","setCards","characters","reduce","cha_list","cha","price_list","console","log","props","getCardsByTheMenu","inputChangedHandler","event","inputIdentifier","i","updateMenu","updateMenuElement","target","checked","setState","clickedhandler","element","maxHeight","index","mapDispatchToProps","dispatch","comp"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nimport * as card from '../../store/actions/index.js';\r\nimport Input from '../form/input/input.js';\r\nimport './search-menu.scss';\r\n\r\nclass SearchMenu extends Component {\r\n    state = {\r\n        menu: {\r\n            creatures: {\r\n                elementType: 'checkbox-v1',\r\n                elementConfig: {\r\n                    name: 'creature',\r\n                    options: [\r\n                        {text: 'robotV1', displayText: \"RobotV1\", value:''},\r\n                        {text: 'robotV2', displayText: \"RobotV2\", value:''},\r\n                        {text: 'monster', displayText: \"Monster\", value:''},\r\n                        {text: 'kitten', displayText: \"Kitten\", value:''}\r\n                    ]\r\n                },\r\n                value: '',\r\n                validation: {},\r\n                valid: false,\r\n                touched: true,\r\n                clicked: false,\r\n                label: false\r\n            },\r\n            price: {\r\n                elementType: 'checkbox-v1',\r\n                elementConfig: {\r\n                    name: 'price',\r\n                    options: [\r\n                        {text: '0', displayText: \"Under $1\", value:''},\r\n                        {text: '1', displayText: \"$1 to $2\", value:''},\r\n                        {text: '2 above', displayText: \"$2 and Above\", value:''}\r\n                    ]\r\n                },\r\n                value: '',\r\n                validation: {},\r\n                valid: false,\r\n                touched: true,\r\n                clicked: false,\r\n                label: false\r\n            },\r\n            time: {\r\n                elementType: 'radio-v2',\r\n                elementConfig: {\r\n                    name: 'date',\r\n                    options: [\r\n                        {text: 'today', displayText: \"Today\", value:''},\r\n                        {text: 'this week', displayText: \"This Week\", value:''},\r\n                        {text: 'this month', displayText: \"This Month\", value:''}\r\n                    ]\r\n                },\r\n                value: ' ',\r\n                validation: {},\r\n                valid: false,\r\n                touched: true,\r\n                clicked: false,\r\n                label: false\r\n            },\r\n        }\r\n    };\r\n\r\n    componentWillMount() {\r\n        this.props.getCardsByTheMenu(this, [], []);\r\n    }\r\n\r\n    setCards = () => {\r\n        const characters = this.state.menu.creatures.elementConfig.options\r\n            .reduce((cha_list, cha) => (cha.value?[ ...cha_list, cha.value]:cha_list), []);\r\n\r\n        const price = this.state.menu.price.elementConfig.options\r\n            .reduce((price_list, price) => (price.value?[ ...price_list, price.value]:price_list), []);\r\n\r\n        console.log(price)\r\n        this.props.getCardsByTheMenu(this, characters, price);\r\n    }\r\n\r\n    inputChangedHandler = (event, inputIdentifier, i) => {\r\n        const updateMenu = {\r\n            ...this.state.menu\r\n        };\r\n        const updateMenuElement = {\r\n            ...updateMenu[inputIdentifier]\r\n        };\r\n        updateMenuElement.touched = true;\r\n        console.log(event.target.checked);\r\n        updateMenuElement.elementConfig.options[i].value = (updateMenuElement.elementConfig.options[i].value===updateMenuElement.elementConfig.options[i].text)?\"\":updateMenuElement.elementConfig.options[i].text;\r\n        updateMenuElement.value = (updateMenuElement.value===updateMenuElement.elementConfig.options[i].text)?\" \":updateMenuElement.elementConfig.options[i].text;\r\n        updateMenu[inputIdentifier] = updateMenuElement;\r\n        console.log(updateMenuElement.value);\r\n        console.log(updateMenuElement);\r\n\r\n        this.setState({menu: updateMenu});\r\n    }\r\n\r\n    clickedhandler = (element) => {\r\n        const updateMenu = {\r\n            ...this.state.menu\r\n        };\r\n        const updateMenuElement = {\r\n            ...updateMenu[element]\r\n        };\r\n        updateMenuElement.clicked = !updateMenuElement.clicked;\r\n        updateMenu[element] = updateMenuElement;\r\n        this.setState({menu: updateMenu});\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div className=\"search-menu\">\r\n                <div className=\"search-menu-item\">\r\n                    <div className=\"search-menu-item-btn\" onClick={()=>(this.clickedhandler(\"creatures\"))}>Creatures</div>\r\n                    <div className=\"search-menu-item-input\" style={{maxHeight: this.state.menu.creatures.clicked?\"100rem\":\"0\"}}>\r\n                        <Input\r\n                            elementType={this.state.menu[\"creatures\"].elementType}\r\n                            elementConfig={this.state.menu[\"creatures\"].elementConfig}\r\n                            value={this.state.menu[\"creatures\"].value}\r\n                            invalid={!this.state.menu[\"creatures\"].valid}\r\n                            shouldValidate={this.state.menu[\"creatures\"].validation}\r\n                            touched={this.state.menu[\"creatures\"].touched}\r\n                            changed={(event, index) => this.inputChangedHandler(event, \"creatures\", index)}\r\n                            label={this.state.menu[\"creatures\"].label}\r\n                            checked={this.state.menu[\"creatures\"].checked}\r\n                            />\r\n                    </div>\r\n                </div>\r\n                <div className=\"search-menu-item\">\r\n                    <div className=\"search-menu-item-btn\" onClick={()=>(this.clickedhandler(\"price\"))}>Price</div>\r\n                    <div className=\"search-menu-item-input\" style={{maxHeight: this.state.menu.price.clicked?\"100rem\":\"0\"}}>\r\n                        <Input\r\n                            elementType={this.state.menu[\"price\"].elementType}\r\n                            elementConfig={this.state.menu[\"price\"].elementConfig}\r\n                            value={this.state.menu[\"price\"].value}\r\n                            invalid={!this.state.menu[\"price\"].valid}\r\n                            shouldValidate={this.state.menu[\"price\"].validation}\r\n                            touched={this.state.menu[\"price\"].touched}\r\n                            changed={(event, index) => this.inputChangedHandler(event, \"price\", index)}\r\n                            label={this.state.menu[\"price\"].label}\r\n                            checked={this.state.menu[\"price\"].checked}\r\n                            />\r\n                        </div>\r\n                </div>\r\n                <div className=\"search-menu-item\">\r\n                    <div className=\"search-menu-item-btn\" onClick={()=>(this.clickedhandler(\"time\"))}>Date</div>\r\n                    <div className=\"search-menu-item-input\" style={{maxHeight: this.state.menu.time.clicked?\"100rem\":\"0\"}}>\r\n                        <Input\r\n                            elementType={this.state.menu[\"time\"].elementType}\r\n                            elementConfig={this.state.menu[\"time\"].elementConfig}\r\n                            value={this.state.menu[\"time\"].value}\r\n                            invalid={!this.state.menu[\"time\"].valid}\r\n                            shouldValidate={this.state.menu[\"time\"].validation}\r\n                            touched={this.state.menu[\"time\"].touched}\r\n                            changed={(event, index) => this.inputChangedHandler(event, \"time\", index)}\r\n                            label={this.state.menu[\"time\"].label}\r\n                            checked={this.state.menu[\"time\"].checked}\r\n                            />\r\n                        </div>\r\n                </div>\r\n                <div className=\"search-menu-search\" onClick={this.setCards}>search</div>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getCardsByTheMenu: (comp, characters, price) => dispatch( card.getCardsByTheMenu(\r\n            comp.state.menu.time.value,\r\n            characters,\r\n            price\r\n            )\r\n        )\r\n    };\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(SearchMenu);"]},"metadata":{},"sourceType":"module"}